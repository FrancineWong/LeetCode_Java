/*一个UTF8字符的长度从1到4个字节不等，服从下列规则：
对于1字节的字符，首位数是0，后面是unicode代码。
对于n字节的字符，前n位数全是1，第n+1位是0，后面跟着n-1个字节，最高位的两位数是10。
详见上表。
给定一个整数数组表示的数据，判断其是否为有效的utf-8编码。
注意：
输入是整数数组。只有最低位的8位数用来存放数据。这意味着每一个整数只表示一个字节的数据。*/
public class Q393_UTF8_Validation {
	/*如果是标识字节，先将其向右平移五位，如果得到110，则说明后面跟了一个字节，否则向右平移四位，如果得到1110，则说明后面跟了两个字节，
	 * 否则向右平移三位，如果得到11110，则说明后面跟了三个字节，否则向右平移七位，如果为1的话，说明是10000000这种情况，不能当标识字节，
	 * 直接返回false。在非标识字节中，向右平移六位，如果得到的不是10，则说明不是以10开头的，直接返回false，否则cnt自减1，成功完成遍历
	 * 返回true，参见代码如下：*/
	public boolean validUTF8(int[] data) {
        int count = 0;
        for(int c: data) {
        	if(count == 0) {
        		if((c>>5) == 0b110) count = 1;
        		else if((c>>4) == 0b1110) count = 2;
        		else if((c>>3) == 0b11110) count = 3;
        		else if((c>>7)==1) return false; 
        	} else {
        		if((c>>6) != 0b10) return false;
        		count--;
        	}
        }
        return count == 0;
	}
	/*这道题考察我们UTF-8编码，这种互联网所采用的通用的编码格式的产生是为了解决ASCII只能表示英文字符的局限性，和统一Unicode的实现方式。
	 * 下面这段摘自维基百科UTF-8编码：

	对于UTF-8编码中的任意字节B，如果B的第一位为0，则B独立的表示一个字符(ASCII码)；
	如果B的第一位为1，第二位为0，则B为一个多字节字符中的一个字节(非ASCII字符)；
	如果B的前两位为1，第三位为0，则B为两个字节表示的字符中的第一个字节；
	如果B的前三位为1，第四位为0，则B为三个字节表示的字符中的第一个字节；
	如果B的前四位为1，第五位为0，则B为四个字节表示的字符中的第一个字节；
	因此，对UTF-8编码中的任意字节，根据第一位，可判断是否为ASCII字符；根据前二位，可判断该字节是否为一个字符编码的第一个字节；
	根据前四位（如果前两位均为1），可确定该字节为字符编码的第一个字节，并且可判断对应的字符由几个字节表示；根据前五位（如果前四位为1），
	可判断编码是否有错误或数据传输过程中是否有错误。
	
	那么根据上面的描述，我们可以先来判断第一位，如果是0的话，则说明是ASCII码，我们直接跳过，判断方法是只要比二进制数10000000小的数第一位
	肯定是0，然后我们来处理第一位是1的情况，由于第一位的1只是个标识符，后面连续跟的1的个数才是表示后面的字节的个数，我们可以统一从第一位开始
	连续1的个数，然后减去1就是后面的字节的个数，我想的办法是如果该数字大于等于128，则表示第一位是1，然后减去128，如果得到的数大于等于64，
	则表示第二位是1，依次类推就可以得到连续的个数，我们要注意10000000这个数是不合法的，遇到了直接返回false。我们得到了cnt的个数，
	只要验证后面的字节是否是以10开头的数即可，验证方法也很简单，只要这个数在10000000 ~ 10111111范围之间，则一定是10开头的*/
}
